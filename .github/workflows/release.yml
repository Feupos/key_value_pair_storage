name: BuildRoot

on:
  push:
    tags:
      - 'v*'
env:
  PROJECT_NAME: "key_value_pair_storage"
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: clone source code
      run: |
        git clone https://github.com/Feupos/buildroot-kvpstorage /opt/buildroot-kvpstorage
        git clone https://github.com/buildroot/buildroot.git /opt/buildroot
        cd /opt/buildroot

    - name: install dependencies
      if: ${{ steps.cache.output.cache-hit != 'true' }}
      run: |
        sudo apt-get update
        sudo apt-get upgrade
        sudo apt-get install -y make gcc g++ unzip git bc python device-tree-compiler mtd-utils

    - name: set version name
      id: version
      run: echo ::set-output name=name::${GITHUB_REF#refs/tags/}

    - name: bulid
      env:
          RELEASE_VERSION: ${{ steps.version.outputs.name }}
      run: |
        echo build kvpstorage $RELEASE_VERSION using make BR2_EXTERNAL=/opt/buildroot-kvpstorage qemu_arm_versatile_kvpstorage_defconfig
        mkdir /opt/artifacts
        cd /opt/buildroot
        make BR2_EXTERNAL=/opt/buildroot-kvpstorage qemu_arm_versatile_kvpstorage_defconfig
        make
        cp -r /opt/buildroot/output/images /opt/artifacts

    - name: generate archive
      run: |
        tar -cvzf $HOME/artifact.tar.gz /opt/artifacts/
    
    - name: upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-${{ steps.version.outputs.name }}
        path: '~/artifact.*'

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: set version name
      id: version
      run: echo ::set-output name=name::${GITHUB_REF#refs/tags/}

    - name: create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.name }}
        # if needed, you can set the release body here
        #body: "Release notes"
        draft: false
        prerelease: false

    - name: download artifact
      uses: actions/download-artifact@v2
      with:
        name: "Linux-${{ steps.version.outputs.name }}"
        path: ./

    - name: upload ubuntu release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "artifact.tar.gz"
        asset_name: "${{ env.PROJECT_NAME }}-Linux-${{ steps.version.outputs.name }}.tar.gz"
        asset_content_type: application/x-tar